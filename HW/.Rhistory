OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
Omax = max(dataAQ$Ozone) # max value
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
# repeat process for each value
SolarDf = dataAQ[ , c(2,5,6,7,8)]
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
suppressWarnings(require(ggplot2))
suppressWarnings(require(lubridate))
suppressWarnings(require(plyr))
suppressWarnings(require(scales))
suppressWarnings(require(zoo))
theme_set(theme_bw())
theme_set(theme_classic())
dataAQ = airquality
# Add time variables
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
dataAQ = na.omit(dataAQ)
# Add time variables
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 153))
Omax = max(dataAQ$Ozone) # max value
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
# repeat process for each value
SolarDf = dataAQ[ , c(2,5,6,7,8)]
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
suppressWarnings(require(ggplot2))
suppressWarnings(require(lubridate))
suppressWarnings(require(plyr))
suppressWarnings(require(scales))
suppressWarnings(require(zoo))
theme_set(theme_bw())
theme_set(theme_classic())
dataAQ = airquality
dataAQ = na.omit(dataAQ)
# Add time variables
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
Omax = max(dataAQ$Ozone) # max value
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
# repeat process for each value
SolarDf = dataAQ[ , c(2,5,6,7,8)]
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
suppressWarnings(require(ggplot2))
suppressWarnings(require(lubridate))
suppressWarnings(require(plyr))
suppressWarnings(require(scales))
suppressWarnings(require(zoo))
theme_set(theme_bw())
theme_set(theme_classic())
dataAQ = airquality
dataAQ = na.omit(dataAQ)
# Add time variables
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
Omax = max(dataAQ$Ozone) # max value
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
# Standardize columns across dfs
newColNames = colnames(OzoneDf)
newColNames[1] = "Value"
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
Omax = max(dataAQ$Ozone) # max value
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
View(OzoneDf)
colnames(OzoneDf) = newColNames
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
dataAQ = airquality
dataAQ = na.omit(dataAQ)
# Add time variables
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# Standardize columns across dfs
newColNames = colnames(OzoneDf)
newColNames[1] = "Value"
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
Omax = max(dataAQ$Ozone) # max value
colnames(OzoneDf) = newColNames # Standardize columns across dfs
OzoneDf$Value = OzoneDf$Value/Omax # convert to percent
# repeat process for each value
SolarDf = dataAQ[ , c(2,5,6,7,8)]
SolarDf$Category = c(rep("Solar.R", 111))
Smax = max(dataAQ$Solar.R)
colnames(SolarDf) = newColNames
SolarDf$Value = SolarDf$Value/Smax
WindDf = dataAQ[ , c(3,5,6,7,8)]
WindDf$Category = c(rep("Wind", 111))
Wmax = max(dataAQ$Wind)
colnames(WindDf) = newColNames
WindDf$Value = WindDf$Value/Wmax
TempDf = dataAQ[ , c(4,5,6,7,8)]
TempDf$Category = c(rep("Temp", 111))
Tmax = max(dataAQ$Temp)
colnames(TempDf) = newColNames
TempDf$Value = TempDf$Value/Tmax
# combine all into one df
newDataAQ = rbind(OzoneDf, SolarDf, WindDf, TempDf)
# plot that mother fucker
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))  +
facet_grid(format(Time, "%y") ~ format(Time, "%b"))
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))  +
facet_grid(format(Time, "%y") ~ Month)
# plot that mother fucker v1
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))
suppressWarnings(require(ggplot2))
suppressWarnings(require(lubridate))
suppressWarnings(require(plyr))
suppressWarnings(require(scales))
suppressWarnings(require(zoo))
theme_set(theme_bw())
theme_set(theme_classic())
# plot that mother fucker v1
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))
# v2
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))  +
facet_grid(format(Time, "%y") ~ format(Time, "%b"))
# v2
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))  +
facet_grid(Year ~ Month)
# v2
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))  +
facet_grid(Year ~ Month)
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
scale_fill_gradientn(colours = heat.colors(500))  +
facet_grid(Year ~ Month)
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = heat.colors(500))
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_brewer(pallette = "Blues")
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_brewer(palette = "Blues")
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = cm.colors(500))
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = terrain.colors(500))
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = topo.colors(500))
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = heat.colors(500, 9))
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = heat.colors(500, 1))
?heat.colors
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = heat.colors(500, start = .5 ))
# v3
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = heat.colors(500 ))
rm(list=ls()) # clear work space
suppressWarnings(require(ggplot2))
# get data and clean it up
dataAQ = airquality
str(dataAQ)
summary(dataAQ)
dataAQ = na.omit(dataAQ)
str(dataAQ)
summary(dataAQ)
# histogram for each variable
ggplot(dataAQ, aes(Ozone) ) +  geom_histogram(binwidth = 20)
ggplot(dataAQ, aes(Temp) ) +  geom_histogram(binwidth = 5)
ggplot(dataAQ, aes(Solar.R) ) +  geom_histogram(binwidth = 20)
ggplot(dataAQ, aes(Wind) ) +  geom_histogram(binwidth = 1)
# box plots for ozone
ggplot(dataAQ, aes(format(Time, "%m"), Ozone)) +
geom_boxplot(fill = "plum") +
xlab("Month")
# box plots for ozone
ggplot(dataAQ, aes(Month, Ozone)) +
geom_boxplot(fill = "plum") +
xlab("Month")
# box plot for wind
ggplot(dataAQ, aes(Month, ceiling(Wind))) +
geom_boxplot(fill = "plum") +
xlab("Month") + ylab("Wind")
# add year
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# histogram for each variable
ggplot(dataAQ, aes(Ozone) ) +  geom_histogram(binwidth = 20)
ggplot(dataAQ, aes(Temp) ) +  geom_histogram(binwidth = 5)
ggplot(dataAQ, aes(Solar.R) ) +  geom_histogram(binwidth = 20)
ggplot(dataAQ, aes(Wind) ) +  geom_histogram(binwidth = 1)
# box plots for ozone
ggplot(dataAQ, aes(format(Time, "%m"), Ozone)) +
geom_boxplot(fill = "plum") +
xlab("Month")
# box plot for wind
ggplot(dataAQ, aes(format(Time, "%m"), ceiling(Wind))) +
geom_boxplot(fill = "plum") +
xlab("Month") + ylab("Wind")
# line charts for variables
ggplot(dataAQ, aes(x = Time)) + geom_line(aes(y = Ozone))
ggplot(dataAQ, aes(x = Time)) + geom_line(aes(y = Temp))
ggplot(dataAQ, aes(x = Time)) + geom_line(aes(y = Wind))
ggplot(dataAQ, aes(x = Time)) + geom_line(aes(y = Solar.R))
# all of them and with colors
ggplot(dataAQ, aes(x = Time)) +
geom_line(aes(y = Ozone), color = 2) +
geom_line(aes(y = Temp), color = 4) +
geom_line(aes(y = Wind), color = 6) +
geom_line(aes(y = Solar.R), color = 8) +
ylab("Values") + xlab("Time")
# mutating data to fit heat map
newColNames = colnames(OzoneDf) # col names
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
# Going to make the data fit the graph I need to create
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
newColNames = colnames(OzoneDf) # col names
newColNames[1] = "Value"
colnames(OzoneDf) = newColNames # Standardize columns across dfs
OzoneDf$Value = OzoneDf$Value/max(dataAQ$Ozone) # convert to percent
# repeat process for each value
SolarDf = dataAQ[ , c(2,5,6,7,8)]
SolarDf$Category = c(rep("Solar.R", 111))
colnames(SolarDf) = newColNames
SolarDf$Value = SolarDf$Value/max(dataAQ$Solar.R)
WindDf = dataAQ[ , c(3,5,6,7,8)]
WindDf$Category = c(rep("Wind", 111))
colnames(WindDf) = newColNames
WindDf$Value = WindDf$Value/max(dataAQ$Wind)
TempDf = dataAQ[ , c(4,5,6,7,8)]
TempDf$Category = c(rep("Temp", 111))
colnames(TempDf) = newColNames
TempDf$Value = TempDf$Value/max(dataAQ$Temp)
newDataAQ = rbind(OzoneDf, SolarDf, WindDf, TempDf) # combine all into one df
# plot heat map
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
scale_fill_gradientn(colours = heat.colors(500))
# scatter plot
ggplot(dataAQ ,aes(Wind, Temp)) +
geom_point(aes(color = Solar.R, size = Ozone)) +
xlab("Wind") + ylab("Temperature")
# plot heat map
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
#scale_fill_gradientn(colours = heat.colors(500))
scale_fill_gradient(low = "yellow", high = "red")
View(newDataAQ)
suppressWarnings(require(ggplot2))
dummyDF = data.frame(state.name, stringsAsFactors = FALSE)
dummyDF$state = tolower(dummyDF$state)
us = map_data("state")
install.packages("maps")
suppressWarnings(require(maps))
us = map_data("state")
map.simple = ggplot(dummyDF, aes(map_id = state))
map.simple = map.simple + geom_map(map = us, fill = "white" + "Black")
map.simple = map.simple + geom_map(map = us, fill = "white", + "Black")
map.simple = map.simple + geom_map(map = us, fill = "white")
map.simple = map.simple + geom_map(map = us, fill = "white") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple
map.simple = map.simple + geom_map(map = us, fill = "white") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple = ggplot(dummyDF, aes(map_id = state))
map.simple = map.simple + geom_map(map = us, fill = "white") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple
install.packages("evaluate")
map.simple
suppressWarnings(require(evaluate))
map.simple
rm(list=ls()) # clear work space
suppressWarnings(require(ggplot2))
suppressWarnings(require(maps))
suppressWarnings(require(evaluate))
dummyDF = data.frame(state.name, stringsAsFactors = FALSE)
dummyDF$state = tolower(dummyDF$state)
us = map_data("state")
map.simple = ggplot(dummyDF, aes(map_id = state))
map.simple = map.simple + geom_map(map = us, fill = "white") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple
install.packages("mapproj")
suppressWarnings(require(mapproj))
map.simple = map.simple + geom_map(map = us, fill = "white") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple = ggplot(dummyDF, aes(map_id = state))
map.simple = map.simple + geom_map(map = us, fill = "white") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple
map.simple = ggplot(dummyDF, aes(map_id = state)) +
map.simple + geom_map(map = us, fill = "white", + color = "black") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple = ggplot(dummyDF, aes(map_id = state)) +
map.simple + geom_map(map = us, fill = "white", + color = "black") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple = ggplot(dummyDF, aes(map_id = state)) +
geom_map(map = us, fill = "white", + color = "black") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple = ggplot(dummyDF, aes(map_id = state)) +
geom_map(map = us, fill = "white",  color = "black") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple
map.simple + geom_point(aes(-100, 30))
readStates = function() {
# read from url
states = read.csv(url("http://www2.census.gov/programs-surveys/popest/tables/2010-2011/state/totals/nst-est2011-01.csv"))
states = states[ , colSums(is.na(states)) < nrow(states)] # remove na cols
states = states[complete.cases(states),] # remove na rows
colnames(states) = c('stateName', 'base2010', 'base2011', 'Jul2010', 'Jul2011') # name cols
states = states[9:59 , ] # Only want 50 states plus DC... FU Puerto Rico
# turning those factors into numeric
states$base2010 = as.numeric(gsub(",","",states$base2010))
states$base2011 = as.numeric(gsub(",","",states$base2011))
states$Jul2010 = as.numeric(gsub(",","",states$Jul2010))
states$Jul2011 = as.numeric(gsub(",","",states$Jul2011))
return (states)
}
dfStates = readStates()
map.simple + geom_point(aes(25, 80))
map.simple = ggplot(dummyDF, aes(map_id = state)) +
geom_map(map = us, fill = "white",  color = "black") +
expand_limits(x = us$long, y = us$lat) + coord_map() + ggtitle("USA!")
map.simple
View(us)
map.simple + geom_point(aes(-87, 25))
View(dfStates)
View(dummyDF)
test = c(1,2,3,4)
scale(test)
sd(test)
mean(test)
scale(test, center = TRUE, scale = TRUE)
scale(test)
result = scale(test)
View(result)
x = result[ , 1]
x
newTest = scale(test)[ , 1]
rm(list=ls()) # clear work space
suppressWarnings(require(ggplot2))
suppressWarnings(require(lubridate))
# get data and clean it up
dataAQ = airquality
str(dataAQ)
summary(dataAQ)
dataAQ = na.omit(dataAQ)
str(dataAQ)
summary(dataAQ)
# add year
dataAQ$Year = c(rep(1973, nrow(dataAQ)))
#dataAQ$Time = with(dataAQ, ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day))
dataAQ$Time = ISOdate(dataAQ$Year, dataAQ$Month, dataAQ$Day)
# mutating data to fit heat map
# filtering data so that the values Ozone, Temp, Wind, and Solar are categories
# Going to make the data fit the graph I need to create
OzoneDf = dataAQ[ , c(1,5,6,7,8)]
OzoneDf$Category = c(rep("Ozone", 111))
newColNames = colnames(OzoneDf) # col names
newColNames[1] = "Value"
colnames(OzoneDf) = newColNames # Standardize columns across dfs
OzoneDf$Value = OzoneDf$Value/max(dataAQ$Ozone) # convert to percent
OzoneDf$Zscore = scale(OzoneDf$Value)[ , 1]
View(OzoneDf)
# repeat process for each value
SolarDf = dataAQ[ , c(2,5,6,7,8)]
SolarDf$Category = c(rep("Solar.R", 111))
colnames(SolarDf) = newColNames
SolarDf$Value = SolarDf$Value/max(dataAQ$Solar.R)
SolarDf$Zscore = scale(SolarDf$Value)[ , 1]
WindDf$Zscore = scale(WindDf$Value)[ , 1]
WindDf = dataAQ[ , c(3,5,6,7,8)]
WindDf$Category = c(rep("Wind", 111))
colnames(WindDf) = newColNames
WindDf$Value = WindDf$Value/max(dataAQ$Wind)
WindDf$Zscore = scale(WindDf$Value)[ , 1]
TempDf$Zscore = scale(TempDf$Value)[ , 1]
TempDf = dataAQ[ , c(4,5,6,7,8)]
TempDf$Category = c(rep("Temp", 111))
colnames(TempDf) = newColNames
TempDf$Value = TempDf$Value/max(dataAQ$Temp)
TempDf$Zscore = scale(TempDf$Value)[ , 1]
newDataAQ = rbind(OzoneDf, SolarDf, WindDf, TempDf) # combine all into one df
View(newDataAQ)
# plot heat map
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Value)) +
facet_grid(Year ~ Month) +
#scale_fill_gradientn(colours = heat.colors(500))
scale_fill_gradient(low = "yellow", high = "red")
# plot heat map 2 z scores
ggplot(newDataAQ, aes(Day, Category)) + geom_tile(aes(fill = Zscore)) +
facet_grid(Year ~ Month) +
#scale_fill_gradientn(colours = heat.colors(500))
scale_fill_gradient(low = "yellow", high = "red")
readStates = function() {
# read from url
states = read.csv(url("http://www2.census.gov/programs-surveys/popest/tables/2010-2011/state/totals/nst-est2011-01.csv"))
states = states[ , colSums(is.na(states)) < nrow(states)] # remove na cols
states = states[complete.cases(states),] # remove na rows
colnames(states) = c('stateName', 'base2010', 'base2011', 'Jul2010', 'Jul2011') # name cols
states = states[9:59 , ] # Only want 50 states plus DC... FU Puerto Rico
# turning those factors into numeric
states$base2010 = as.numeric(gsub(",","",states$base2010))
states$base2011 = as.numeric(gsub(",","",states$base2011))
states$Jul2010 = as.numeric(gsub(",","",states$Jul2010))
states$Jul2011 = as.numeric(gsub(",","",states$Jul2011))
return (states)
}
test = readStates()
test
View(test)
gdata
state
state
x = state
state.name
install.packages("gdata")
?gdata
rm(list=ls()) # clear work space
suppressWarnings(require(openxlsx))
suppressWarnings(require(ggplot2))
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_687/HW/")
fileName = "mlr01.xlsx"
fawnData = read.xlsx(fileName)
colnames(fawnData) = c("FawnCount", "AntelopeAdultPop", "Percipitation", "WinterSev")
summary(fawnData)
str(fawnData)
# fawn vs adult antelopes
ggplot(fawnData, aes(AntelopeAdultPop, FawnCount)) + geom_jitter() +
xlab("Adult Antelope") + ylab("Fawns")
# fawn vs precipitation
ggplot(fawnData, aes(Percipitation, FawnCount)) + geom_jitter() +
xlab("Percipitation") + ylab("Fawns")
# fawn vs winter
ggplot(fawnData, aes(WinterSev, FawnCount)) + geom_jitter() +
xlab("Winter Severity") + ylab("Fawns")
# fawns ~ winter
model_001 = lm(FawnCount ~ WinterSev, data = fawnData)
summary(model_001)
# fawns ~ winter + percipitation
model_002 = lm(FawnCount ~ WinterSev + Percipitation, data = fawnData)
summary(model_002)
# fawns ~ winter + percipitation + adults
model_003 = lm(FawnCount ~ WinterSev + Percipitation + AntelopeAdultPop, data = fawnData)
summary(model_003)
plot(fawnData$WinterSev, fawnData$FawnCount)
abline(model_001)
#
plot(model_003)
summary(model_001)
summary(model_002)
summary(model_003)
data("airquality")
data = data("airquality")
airquality
aq = airquality
View(aq)
rm(list=ls()) # clear work space
dataAQ = airquality
dev.off(dev.list()["RStudioGD"]) # clear plots
dataAQ = na.omit(dataAQ)
is.na(dataAQ)
sum(is.na(dataAQ) == FALSE)
sum(is.na(dataAQ) == TRUE)
trngData = dataAQ[1:77, ]
testData = dataAQ[78:111, ]
getwd()
